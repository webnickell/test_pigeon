// Autogenerated from Pigeon (v1.0.7), do not edit directly.
// See also: https://pub.dev/packages/pigeon
#import "message.h"
#import <Flutter/Flutter.h>

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSDictionary<NSString *, id> *wrapResult(id result, FlutterError *error) {
  NSDictionary *errorDict = (NSDictionary *)[NSNull null];
  if (error) {
    errorDict = @{
        @"code": (error.code ? error.code : [NSNull null]),
        @"message": (error.message ? error.message : [NSNull null]),
        @"details": (error.details ? error.details : [NSNull null]),
        };
  }
  return @{
      @"result": (result ? result : [NSNull null]),
      @"error": errorDict,
      };
}

@interface Message ()
+ (Message *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end

@implementation Message
+ (Message *)fromMap:(NSDictionary *)dict {
  Message *result = [[Message alloc] init];
  result.text = dict[@"text"];
  if ((NSNull *)result.text == [NSNull null]) {
    result.text = nil;
  }
  result.title = dict[@"title"];
  if ((NSNull *)result.title == [NSNull null]) {
    result.title = nil;
  }
  result.author = dict[@"author"];
  if ((NSNull *)result.author == [NSNull null]) {
    result.author = nil;
  }
  return result;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.text ? self.text : [NSNull null]), @"text", (self.title ? self.title : [NSNull null]), @"title", (self.author ? self.author : [NSNull null]), @"author", nil];
}
@end

@interface MessageHostApiCodecReader : FlutterStandardReader
@end
@implementation MessageHostApiCodecReader
- (nullable id)readValueOfType:(UInt8)type 
{
  switch (type) {
    case 128:     
      return [Message fromMap:[self readValue]];
    
    default:    
      return [super readValueOfType:type];
    
  }
}
@end

@interface MessageHostApiCodecWriter : FlutterStandardWriter
@end
@implementation MessageHostApiCodecWriter
- (void)writeValue:(id)value 
{
  if ([value isKindOfClass:[Message class]]) {
    [self writeByte:128];
    [self writeValue:[value toMap]];
  } else 
{
    [super writeValue:value];
  }
}
@end

@interface MessageHostApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation MessageHostApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[MessageHostApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[MessageHostApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *MessageHostApiGetCodec() {
  static dispatch_once_t s_pred = 0;
  static FlutterStandardMessageCodec *s_sharedObject = nil;
  dispatch_once(&s_pred, ^{
    MessageHostApiCodecReaderWriter *readerWriter = [[MessageHostApiCodecReaderWriter alloc] init];
    s_sharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return s_sharedObject;
}


void MessageHostApiSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<MessageHostApi> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.MessageHostApi.subscribeOnMessages"
        binaryMessenger:binaryMessenger
        codec:MessageHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(subscribeOnMessagesAuthorId:error:)], @"MessageHostApi api (%@) doesn't respond to @selector(subscribeOnMessagesAuthorId:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_authorId = args[0];
        FlutterError *error;
        [api subscribeOnMessagesAuthorId:arg_authorId error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.MessageHostApi.sendMessage"
        binaryMessenger:binaryMessenger
        codec:MessageHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(sendMessageAuthorId:message:error:)], @"MessageHostApi api (%@) doesn't respond to @selector(sendMessageAuthorId:message:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_authorId = args[0];
        Message *arg_message = args[1];
        FlutterError *error;
        [api sendMessageAuthorId:arg_authorId message:arg_message error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
@interface MessageFlutterApiCodecReader : FlutterStandardReader
@end
@implementation MessageFlutterApiCodecReader
- (nullable id)readValueOfType:(UInt8)type 
{
  switch (type) {
    case 128:     
      return [Message fromMap:[self readValue]];
    
    default:    
      return [super readValueOfType:type];
    
  }
}
@end

@interface MessageFlutterApiCodecWriter : FlutterStandardWriter
@end
@implementation MessageFlutterApiCodecWriter
- (void)writeValue:(id)value 
{
  if ([value isKindOfClass:[Message class]]) {
    [self writeByte:128];
    [self writeValue:[value toMap]];
  } else 
{
    [super writeValue:value];
  }
}
@end

@interface MessageFlutterApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation MessageFlutterApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[MessageFlutterApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[MessageFlutterApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *MessageFlutterApiGetCodec() {
  static dispatch_once_t s_pred = 0;
  static FlutterStandardMessageCodec *s_sharedObject = nil;
  dispatch_once(&s_pred, ^{
    MessageFlutterApiCodecReaderWriter *readerWriter = [[MessageFlutterApiCodecReaderWriter alloc] init];
    s_sharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return s_sharedObject;
}


@interface MessageFlutterApi ()
@property (nonatomic, strong) NSObject<FlutterBinaryMessenger> *binaryMessenger;
@end

@implementation MessageFlutterApi
- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger> *)binaryMessenger {
  self = [super init];
  if (self) {
    _binaryMessenger = binaryMessenger;
  }
  return self;
}

- (void)getMessageMessage:(Message *)arg_message completion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.MessageFlutterApi.getMessage"
      binaryMessenger:self.binaryMessenger
      codec:MessageFlutterApiGetCodec()];
  [channel sendMessage:@[arg_message] reply:^(id reply) {
    completion(nil);
  }];
}
@end
