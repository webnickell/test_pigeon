// Autogenerated from Pigeon (v1.0.7), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package io.flutter.plugins;

import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class ChatMessage {

  public enum DeviceBondState {
    none(0),
    bonding(1),
    bonded(2);

    private int index;
    private DeviceBondState(final int index) {
      this.index = index;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class Message {
    private String text;
    public String getText() { return text; }
    public void setText(String setterArg) { this.text = setterArg; }

    private String title;
    public String getTitle() { return title; }
    public void setTitle(String setterArg) { this.title = setterArg; }

    private String author;
    public String getAuthor() { return author; }
    public void setAuthor(String setterArg) { this.author = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("text", text);
      toMapResult.put("title", title);
      toMapResult.put("author", author);
      return toMapResult;
    }
    static Message fromMap(Map<String, Object> map) {
      Message fromMapResult = new Message();
      Object text = map.get("text");
      fromMapResult.text = (String)text;
      Object title = map.get("title");
      fromMapResult.title = (String)title;
      Object author = map.get("author");
      fromMapResult.author = (String)author;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class Device {
    private String name;
    public String getName() { return name; }
    public void setName(String setterArg) { this.name = setterArg; }

    private List<String> uuids;
    public List<String> getUuids() { return uuids; }
    public void setUuids(List<String> setterArg) { this.uuids = setterArg; }

    private String macAddress;
    public String getMacAddress() { return macAddress; }
    public void setMacAddress(String setterArg) { this.macAddress = setterArg; }

    private DeviceBondState bondState;
    public DeviceBondState getBondState() { return bondState; }
    public void setBondState(DeviceBondState setterArg) { this.bondState = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("name", name);
      toMapResult.put("uuids", uuids);
      toMapResult.put("macAddress", macAddress);
      toMapResult.put("bondState", bondState.index);
      return toMapResult;
    }
    static Device fromMap(Map<String, Object> map) {
      Device fromMapResult = new Device();
      Object name = map.get("name");
      fromMapResult.name = (String)name;
      Object uuids = map.get("uuids");
      fromMapResult.uuids = (List<String>)uuids;
      Object macAddress = map.get("macAddress");
      fromMapResult.macAddress = (String)macAddress;
      Object bondState = map.get("bondState");
      fromMapResult.bondState = DeviceBondState.values()[(int)bondState];
      return fromMapResult;
    }
  }
  private static class ChatMessageHostApiCodec extends StandardMessageCodec {
    public static final ChatMessageHostApiCodec INSTANCE = new ChatMessageHostApiCodec();
    private ChatMessageHostApiCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return Device.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)129:         
          return Message.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof Device) {
        stream.write(128);
        writeValue(stream, ((Device) value).toMap());
      } else 
      if (value instanceof Message) {
        stream.write(129);
        writeValue(stream, ((Message) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface ChatMessageHostApi {
    void connect(String id);
    void disconnect();
    void sendMessage(String authorId, Message message);
    List<Device> pairedDevices();
    void discoverDevices();
    Boolean isBluetoothEnabled();
    Boolean isBluetoothAvailable();
    void enableBluetooth();

    /** The codec used by ChatMessageHostApi. */
    static MessageCodec<Object> getCodec() {
      return ChatMessageHostApiCodec.INSTANCE;
    }

    /** Sets up an instance of `ChatMessageHostApi` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, ChatMessageHostApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ChatMessageHostApi.connect", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String idArg = (String)args.get(0);
              if (idArg == null) {
                throw new NullPointerException("idArg unexpectedly null.");
              }
              api.connect(idArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ChatMessageHostApi.disconnect", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              api.disconnect();
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ChatMessageHostApi.sendMessage", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String authorIdArg = (String)args.get(0);
              if (authorIdArg == null) {
                throw new NullPointerException("authorIdArg unexpectedly null.");
              }
              Message messageArg = (Message)args.get(1);
              if (messageArg == null) {
                throw new NullPointerException("messageArg unexpectedly null.");
              }
              api.sendMessage(authorIdArg, messageArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ChatMessageHostApi.pairedDevices", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              List<Device> output = api.pairedDevices();
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ChatMessageHostApi.discoverDevices", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              api.discoverDevices();
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ChatMessageHostApi.isBluetoothEnabled", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Boolean output = api.isBluetoothEnabled();
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ChatMessageHostApi.isBluetoothAvailable", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Boolean output = api.isBluetoothAvailable();
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ChatMessageHostApi.enableBluetooth", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              api.enableBluetooth();
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static class ChatMessageFlutterApiCodec extends StandardMessageCodec {
    public static final ChatMessageFlutterApiCodec INSTANCE = new ChatMessageFlutterApiCodec();
    private ChatMessageFlutterApiCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return Device.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)129:         
          return Message.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof Device) {
        stream.write(128);
        writeValue(stream, ((Device) value).toMap());
      } else 
      if (value instanceof Message) {
        stream.write(129);
        writeValue(stream, ((Message) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated class from Pigeon that represents Flutter messages that can be called from Java.*/
  public static class ChatMessageFlutterApi {
    private final BinaryMessenger binaryMessenger;
    public ChatMessageFlutterApi(BinaryMessenger argBinaryMessenger){
      this.binaryMessenger = argBinaryMessenger;
    }
    public interface Reply<T> {
      void reply(T reply);
    }
    static MessageCodec<Object> getCodec() {
      return ChatMessageFlutterApiCodec.INSTANCE;
    }

    public void putMessage(Message messageArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ChatMessageFlutterApi.putMessage", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(messageArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void putNewDevice(Device deviceArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ChatMessageFlutterApi.putNewDevice", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(deviceArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void setBluetoothEnabledStatus(Boolean enabledArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ChatMessageFlutterApi.setBluetoothEnabledStatus", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(enabledArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void setBluetoothAvailableStatus(Boolean enabledArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ChatMessageFlutterApi.setBluetoothAvailableStatus", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(enabledArg)), channelReply -> {
        callback.reply(null);
      });
    }
  }
  private static Map<String, Object> wrapError(Throwable exception) {
    Map<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", null);
    return errorMap;
  }
}
